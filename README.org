* krs_lift_congruence

  This package checks congruence between Kim-Ramakrishnan-Shahidi lifts
  and non-lifts.
  We check congruences for lifts of elliptic modular forms of level one
  and of weight 16, 18, 20.

** Dependencies
   - [[http://www.sagemath.org/][SageMath]]
   - [[https://github.com/stakemori/degree2][degree2]]

** Installation
   1. Install [[http://www.sagemath.org/][SageMath]]. We used SageMath 6.5.
   2. [[https://github.com/stakemori/degree2][degree2]] and this package are packages written in pure Python.
      Place them to an appropriate directory so that SageMath can find
      these packages.

** Usage
   First prepare a directory for saving data.
   For example, we create "~/ksr_lift_data_dir" for the data directory.

#+begin_src sh
  $ mkdir ~/ksr_lift_data_dir
#+end_src

   And in SageMath, evaluate the following code.

#+begin_src python
  sage: import krs_lift_congruence.utils
  sage: import os
  sage: krs_lift_congruence.utils.data_dir = os.path.expanduser("~/ksr_lift_data_dir")
#+end_src

   To compute basis of weights det^17 Sym(14), det^19 Sym(16) and
   det^21 Sym(18), lifts and non-lifts with precision 6, evaluate the
   following code.

#+begin_src python
  sage: from krs_lift_congruence.check_krs_cong import compute_lift_and_non_lift
  sage: compute_lift_and_non_lift()
#+end_src

   Then basis, lifts and non-lifts will be saved in the data directory.
   For example to load the lift of weight det^17 Sym(14) and
   non-lift of the same weight, try the following code.

#+begin_src python
  sage: from degree2.elements import SymWtModFmElt
  sage: lift = SymWtModFmElt.load_from("~/ksr_lift_data_dir/lift_17_14_prec6.sobj")
  sage: nonlift = SymWtModFmElt.load_from("~/ksr_lift_data_dir/nonlift_17_14_prec6.sobj")
#+end_src

   To check congruences, evaluate the following code.

#+begin_src python
  sage: from krs_lift_congruence.check_krs_cong import check_congruence
  sage: check_congruence()
#+end_src

   To compute the critical value of symmetric 6th of elliptic modular form,
   try the following code (here we compute =L(Sym^6, 46, f16)= where =f16= is
   the primitive form of level 1 and weight 16).

#+begin_src python
  sage: from krs_lift_congruence.symmetric_l_calculator import Symm6Calculator
  sage: from sage.all import CuspForms
  sage: f16 = CuspForms(1, 16).newforms()[0] # The primitive form of weight 16.
  sage: lcalc = Symm6Calculator(f, digits=150)
  sage: alg_part = lcalc.algebraic_part_numeric(46) # The conjectural algebraic part.
  sage: alg_part

#+end_src


** License
   Licensed under [[http://www.gnu.org/licenses/gpl.html][GPL]].
